{"version":3,"sources":["components/Calculator.js","components/KeyPad.js","components/ResultArea.js","App.js","serviceWorker.js","index.js","styles/mainColor.js"],"names":["Table","styled","table","result","numberBuffer","afterCalc","afterEqual","Calculator","useState","value","setValue","process","setProcess","changeHandler","btn","String","Number","eval","e","replace","slice","indexOf","NumberButton","button","props","double","CalcButton","GRAY","EqualButton","DEEP_PURPLE","KeyPad","onClick","colSpan","InputArea","h1","ProcessArea","p","Title","ResultArea","GlobalStyle","createGlobalStyle","Container","div","Loading","App","isLoading","setIsLoading","useEffect","setTimeout","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b1e5e078.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport {\n    DEEP_PURPLE,\n    GRAY,\n} from '../styles/mainColor';\nimport KeyPad from './KeyPad';\nimport ResultArea from './ResultArea';\n\nconst Table = styled.table`\n    padding: 30px;\n    border-radius: 50px;\n    background-color: white;\n    border-spacing: 0px;\n`;\n\nlet result = 0;\nlet numberBuffer = \"\";\nlet afterCalc = false;\nlet afterEqual = false;\n\nconst Calculator = () => {\n    const [value, setValue] = useState(\"0\");\n    const [process, setProcess] = useState(\"0\");\n\n    const changeHandler = (btn) => {\n        // 입력받은 parameter가 숫자일 경우\n        if (typeof btn === 'number') {\n            if (afterCalc) {\n                afterCalc = false;\n                numberBuffer = String(btn);\n            }\n            else if (afterEqual) {\n                afterEqual = false;\n                result = \"\";\n                numberBuffer += String(btn);\n            }\n            else if (value === \"0\") {\n                numberBuffer = String(btn);\n            }\n            else if (btn === 0) {\n                if (numberBuffer === 0 || numberBuffer === \"\") {\n                    numberBuffer = String(btn);\n                }\n                else {\n                    numberBuffer += String(btn);\n                }\n            }\n            else {\n                numberBuffer += String(btn);\n            }\n\n            setValue(numberBuffer);\n            setProcess(((Number(result) === 0) ? \"\" : result) + numberBuffer);\n        }\n        // 입력받은 parameter가 문자일 경우\n        else {\n            switch (btn) {\n                case \"=\":\n                    result += Number(numberBuffer);\n\n                    try {\n                        result = eval(result);\n                    } catch (e) {\n                        setValue(\"error\");\n                    }\n\n                    numberBuffer = \"\";\n                    afterEqual = true;\n                    setValue(result);\n                    break;\n\n                case \"AC\":\n                    result = \"\";\n                    numberBuffer = \"\";\n                    setValue(0);\n                    setProcess(0);\n                    break;\n\n                case \"FRONT\":\n                    if (numberBuffer > 0) {\n                        numberBuffer = \"-\" + numberBuffer;\n                        setValue(numberBuffer);\n                    }\n                    else if (numberBuffer < 0) {\n                        numberBuffer = numberBuffer.replace(\"-\", \"\");\n                        setValue(numberBuffer);\n                    }\n                    break;\n\n                case \"BACK\":\n                    if (numberBuffer) {\n                        numberBuffer = numberBuffer.slice(0, -1);\n                        if (numberBuffer)\n                            setValue(numberBuffer);\n                        else\n                            setValue(0);\n                    }\n                    break;\n\n                case \".\":\n                    if (numberBuffer.indexOf(\".\") === -1) {\n                        numberBuffer += \".\";\n                        setValue(numberBuffer);\n                    }\n                    afterCalc = false;\n                    break;\n\n                default:\n                    if (afterCalc) {\n                        result = result.slice(0, -1);\n                    }\n                    result += (Number(numberBuffer) ? Number(numberBuffer) : \"\");\n                    result += btn;\n                    numberBuffer = \"0\";\n                    afterCalc = true;\n                    break;\n            }\n\n            if (!result && !Number(numberBuffer)) {\n                setProcess(0);\n            }\n            else\n                setProcess((Number(result) === 0 ? \"\" : result)\n                    + (Number(numberBuffer) === 0 ? \"\" : numberBuffer));\n\n        }\n\n        // console.log(result, numberBuffer);\n    }\n\n    return (\n        <Fragment>\n            <Table>\n                <thead>\n                    <ResultArea value={value} process={process} />\n                </thead>\n                <tbody>\n                    <KeyPad changeHandler={changeHandler} />\n                </tbody>\n            </Table>\n        </Fragment>\n    );\n};\n\nexport default Calculator;","import React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport {\n    DEEP_PURPLE,\n    GRAY,\n} from '../styles/mainColor';\n\nconst NumberButton = styled.button`\n    width: ${props => {\n        if (props.double)\n            return '122px';\n        else\n            return '60px';\n    }};\n    height: 60px;\n    font-size: 22px;\n    text-align: center;\n    color: black;\n    background-color: white;\n    border: white;\n    border-radius: 50px;\n    outline: none;\n    cursor: pointer;\n    &:hover {\n        opacity: 0.7;\n        \n    }\n    &:active {\n        filter: brightness(80%);\n    }\n`;\n\nconst CalcButton = styled(NumberButton)`\n    background-color: ${GRAY};\n`;\n\nconst EqualButton = styled(NumberButton)`\n    background-color: ${DEEP_PURPLE};\n    color: white;\n`;\n\nconst KeyPad = (props) => {\n    return (\n        <Fragment>\n            <tbody>\n                <tr>\n                    <td><CalcButton onClick={() => props.changeHandler(\"/\")}>/</CalcButton></td>\n                    <td><CalcButton onClick={() => props.changeHandler(\"*\")}>x</CalcButton></td>\n                    <td><CalcButton onClick={() => props.changeHandler(\"-\")}>-</CalcButton></td>\n                    <td><CalcButton onClick={() => props.changeHandler(\"+\")}>+</CalcButton></td>\n                </tr>\n                <tr>\n                    <td><NumberButton onClick={() => props.changeHandler(7)}>7</NumberButton></td>\n                    <td><NumberButton onClick={() => props.changeHandler(8)}>8</NumberButton></td>\n                    <td><NumberButton onClick={() => props.changeHandler(9)}>9</NumberButton></td>\n                    <td><CalcButton onClick={() => props.changeHandler(\"FRONT\")}>+/-</CalcButton></td>\n                </tr>\n                <tr>\n                    <td><NumberButton onClick={() => props.changeHandler(4)}>4</NumberButton></td>\n                    <td><NumberButton onClick={() => props.changeHandler(5)}>5</NumberButton></td>\n                    <td><NumberButton onClick={() => props.changeHandler(6)}>6</NumberButton></td>\n                    <td><CalcButton onClick={() => props.changeHandler(\"AC\")}>AC</CalcButton></td>\n                </tr>\n                <tr>\n                    <td><NumberButton onClick={() => props.changeHandler(1)}>1</NumberButton></td>\n                    <td><NumberButton onClick={() => props.changeHandler(2)}>2</NumberButton></td>\n                    <td><NumberButton onClick={() => props.changeHandler(3)}>3</NumberButton></td>\n                    <td><CalcButton onClick={() => props.changeHandler(\"BACK\")}>⌫</CalcButton></td>\n                </tr>\n                <tr>\n                    <td colSpan={2}><NumberButton double={1} onClick={() => props.changeHandler(0)}>0</NumberButton></td>\n                    <td><NumberButton onClick={() => props.changeHandler(\".\")}>.</NumberButton></td>\n                    <td><EqualButton onClick={() => props.changeHandler(\"=\")}>=</EqualButton></td>\n                </tr>\n            </tbody>\n        </Fragment>\n    );\n};\n\nexport default KeyPad;","import React, { Fragment } from 'react';\nimport styled from 'styled-components';\nimport {\n    DEEP_PURPLE,\n    GRAY,\n} from '../styles/mainColor';\n\nconst InputArea = styled.h1`\n    font-size: 25px;\n    color: black;\n    text-align: right;\n    margin: 0;\n    padding: 15px 10px 15px 10px;\n    background-color: white;\n`;\n\nconst ProcessArea = styled.p`\n    font-size: 15px;\n    background-color: white;\n    color: gray;\n    margin: 0;\n    padding: 5px 10px;\n    text-align: right;\n`;\n\n\nconst Title = styled.p`\n    padding-top: 10px;\n    font-weight: bold;\n    font-size: 30px;\n    color: ${DEEP_PURPLE};\n    margin: 0;\n`;\n\nconst ResultArea = (props) => {\n    return (\n        <Fragment>\n            <tr>\n                <td colSpan={4}><Title>Calculator</Title></td>\n            </tr>\n            <tr>\n                <td colSpan={4}><InputArea>{props.value}</InputArea></td>\n            </tr>\n            <tr>\n                <td colSpan={4}><ProcessArea>{props.process}</ProcessArea></td>\n            </tr>\n        </Fragment>\n    );\n};\n\nexport default ResultArea;","import React, { useState, useEffect } from 'react';\nimport Calculator from './components/Calculator';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport {\n  DEEP_PURPLE,\n  GRAY,\n} from './styles/mainColor';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    padding: 0;\n    margin: 0;\n    background-color: ${DEEP_PURPLE};\n    /* height: 100%; */\n  }\n  td {\n      padding: 5px;\n      border: 1px solid white;\n  }\n`;\n\nconst Container = styled.div`\n    align-items: center;\n    display: flex;\n    justify-content: center;\n    margin-top: 120px;\n`;\n\nconst Loading = styled(Container)`\n  color: white;\n  margin-top: 230px;\n`;\n\n\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Container>\n        {\n          isLoading ? (\n            <Loading><h1>Loading . . .</h1></Loading>\n          ) : (\n              <Calculator />\n            )\n        }\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nexport const SKY_BLUE = \"#A2C5F2\";\nexport const DEEP_BLUE = \"#5979D9\";\nexport const DEEP_PURPLE = \"#151122\";\nexport const GRAY = \"#EEEEEE\";\n"],"sourceRoot":""}